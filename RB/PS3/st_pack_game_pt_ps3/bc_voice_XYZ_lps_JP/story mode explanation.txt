For better understaning: https://vivethemodder.github.io/complete-gsc-breakdown/

0A or 1A is a pointer to instructions followed by the value: 0A 04 

to find true value, go to gsdt section copy from under the header to next to last EOFC. paste it into a blank hex file.
get your value ( for example 04) multiply times 4 = 16
16 is the location of the specific byte
go to your new hex file you pasted gsdt into, press CONTROL+G and paste 16 (make sure its decimal)
the value your brought to is the true value the instructions are pointing to
now let's say you wanna switch the values, we'll go to spot you want. take note of location.
divide that by 4, and convert to hex and move to original gsc file
now put that new value over the old value (4) 
done!

Instruction structure: AA BB CC DD
AA -> 01: function, 08: properties
BB -> if AA is 01: num of params, if AA is 08: function ID
CC -> if AA is 01: function ID, if AA is 08: num of params
00 -> unk

0 GSAC -> Definitions
	02 00 AB CD -> First GSAC event to load where AB CD is the
	id of the GSAC to load

1 GSAC -> Unknown

2 GSAC -> Rewards
	01 01 00 00 -> UNK
	01 03 0F 00 -> UNK
	01 03 10 00 -> scenario_unlock_rewards
	01 03 11 00 -> music_rewards
	01 03 12 00 -> museum_rewards
	01 03 13 00 -> character_rewards
	01 00 14 00 -> UNK
	08 6F 02 00 -> unlock_attacks
	01 03 15 00 -> item_rewards

3 GSAC -> Stage properties
	01 03 08 00 -> Stage properties (map, music, number of characters)
		Pointer 0 -> Map value
		Pointer 1 -> Music
		Pointer 2 -> UNK
	01 0C 09 00 -> Define who is P1 and CPU
		Pointer 0 -> UNK
		Pointer 1 -> Select actor ID as P1
		Pointer 2 -> UNK
		Pointer 3 -> UNK
		Pointer 4 -> UNK
		Pointer 5 -> UNK
		Pointer 6 -> UNK
		Pointer 7 -> Select actor ID as CPU
		Pointer 8 -> UNK
		Pointer 9 -> UNK
		Pointer 10 -> UNK
		Pointer 11 -> UNK
	01 00 0A 00 -> UNK
	08 65 03 00 -> Character model partner
		Pointer 0 -> Model ID
		Pointer 1 -> Skin
		Pointer 2 -> Damaged costume
	01 0F 0B 00 -> Define characters
		Pointer 0 -> actor ID -> defines an ID for each actor (the values are 1, 2, 3...). Manages who is P1 and CPU. Will be used in instructions of GSAC 5 and so on
		Pointer 1 -> unk
		Pointer 2 -> character_id
		Pointer 3 -> outfit
		Pointer 4 -> enable_outfit_damaged
		Pointer 5 -> unk
		Pointer 6 -> unk
		Pointer 7 -> unk
		Pointer 8 -> health (27 in GSDT is 3 spheres, 92 is 6 spheres)
		Pointer 9 -> unk
		Pointer 10 -> unk
		Pointer 11 -> unk
		Pointer 12 -> unk
		Pointer 13 -> unk
		Pointer 14 -> unk
	01 06 0C 00 -> Character attacks
		Pointer 0 -> actor ID -> defines an ID for each actor (the values are 1, 2, 3...). Manages who is P1 and CPU. Will be used in instructions of GSAC 5 and so on
		Pointer 1 -> up superattack
		Pointer 2 -> down superattack
		Pointer 3 -> left superattack
		Pointer 4 -> right superattack
		Pointer 5 -> ultra superattack

4 GSAC -> Control the subtitles
	08 76 04 00 -> Subtitle
		Pointer 0 -> instruction ID (the first instruction is 0, the second is 1, and so on)
		Pointer 1 -> cutscene subtitle -> the value is 0 when is used in the story, 1 when is not used
		Pointer 2 -> text and lips ID to be used
		Pointer 3 -> Character name (the value is the ID of the character)

5 to the end GSAC -> Events
	01 00 01 00 08 74 00 00 01 00 03 00 01 00 4C 00 -> means is a GSAC with cutscene ->
		01 00 01 00 -> Define cutscene entry. It crashes when you remove it
		08 74 00 00 -> Disable HUD, activate cutscene mode. It could have 7 parameters -> 08 74 07 00
		01 00 03 00 -> UNK
		01 00 4C 00 -> Disable HUD, activate cutscene mode
	01 03 39 00 -> Black shading in? not sure
		Pointer 0 -> UNK
		Pointer 1 -> UNK
		Pointer 2 -> UNK
	01 03 22 00 -> Show character
		Pointer 0 -> Character P1 (0) or CPU (1)
		Pointer 1 -> Select character partner (1 select partner, 0 select main)
		Pointer 2 -> Show character (0 hide, 1 show)
	01 08 23 00 -> Character position (cutscene)
		Pointer 0 -> Character P1 (0) or CPU (1)
		Pointer 1 -> Select character partner
		Pointer 2 -> position x
		Pointer 3 -> position y
		Pointer 4 -> position z
		Pointer 5 -> rotation x
		Pointer 6 -> rotation y
		Pointer 7 -> rotation z
	01 05 27 00 -> Animation
		Pointer 0 -> Character P1 (0) or CPU (1)
		Pointer 1 -> Enable character partner
		Pointer 2 -> UNK
		Pointer 3 -> UNK
		Pointer 4 -> Animation -> GSTD -> 0 Idle, 1 Idle fly, 2 charge in, 3 charge loop
	01 04 28 00 -> Character face
		Pointer 0 -> Character P1 (0) or CPU (1)
		Pointer 1 -> Enable character partner
		Pointer 2 -> UNK
		Pointer 3 -> smile and sweat -> GSTD -> 2 sweat, 4 Smile, 6 sweat and smile
	01 07 34 00 -> camera properties start
		Pointer 0 -> unk
		Pointer 1 -> position x
		Pointer 2 -> position y
		Pointer 3 -> position z
		Pointer 4 -> rotation x
		Pointer 5 -> rotation y
		Pointer 6 -> rotation z
	01 08 35 00 -> camera properties end
		Pointer 0 -> unk
		Pointer 1 -> unk
		Pointer 2 -> position x
		Pointer 3 -> position y
		Pointer 4 -> position z
		Pointer 5 -> rotation x
		Pointer 6 -> rotation y
		Pointer 7 -> rotation z
	01 01 1B 00 -> Pause until next iteration
		Pointer 0 -> Time
	01 04 20 00 -> Control the ID text, audio and who is talking
		Pointer 0 -> audio, text and lips animations
		Pointer 1 -> Enable/Disable P1 talking -> GSTD -> 0 talk, 1 mouth closed (If we enable the P1 character to talk, the following characters won't talk eventhough you enable them)
		Pointer 2 -> Enable/Disable P2 talking
		Pointer 3 -> Enable/Disable P3 talking
	08 70 01 00 -> Following audio to reproduce
		Pointer 1 -> Audio ID
	01 02 4B 00 -> UNK
	01 08 26 00 -> Character position (gameplay)
		Pointer 0 -> Character P1 (0) or CPU (1)
		Pointer 1 -> position x
		Pointer 2 -> position y
		Pointer 3 -> position z
		Pointer 4 -> rotation x
		Pointer 5 -> rotation y
		Pointer 6 -> rotation z
	01 03 31 00 -> Activate aura
		Pointer 1 -> UNK
		Pointer 2 -> UNK
		Pointer 3 -> Enable/Disable aura

	(From here, the following instructions are mandatory for each GSAC of events)
	01 00 04 00 01 00 05 00 08 74 07 00 -> How the battle starts and ends
		Pointer 0 -> Enable/Disable message -> battle starts! (20 in GSTD -> regular start, 02 in GSDT -> starts immediately, 03 in GSDT -> ends battle as a win, 04 in GSDT -> ends battle as a lose)
		Pointer 1 -> unk
		Pointer 2 -> unk
		Pointer 3 -> unk
		Pointer 4 -> unk
		Pointer 5 -> unk
		Pointer 6 -> Id blast attack enemy that will start executing
	01 00 07 00 -> UNK (always follow the first of one of the following intructions)
		08 61 02 00 -> Controls what is the following GSAC when enemy reach a certain ammount of health
			Pointer 0 -> The ammount of health to trigger (87 in GSTD, means 2 spheres of health, 88 in GSTD, means 1 sphere of health)
			Pointer 1 -> What is the next GSTD (the value is a pointer to the GSAC that is located in his header. It has an ID)
		08 76 02 00 -> Controls audio and dialogue during gameplay (when player or cpu gets hurted)
			Pointer 0 -> UNK (-1 in GSTD, means do nothing)
			Pointer 1 -> UNK (0 in GSTD, means do nothing)
	01 00 16 00 ->  UNK (always follow the first of one of the following intructions)
		08 6A 06 00 -> Control the message of what to do (vanish, super attack, etc)
			Pointer 0 -> When the message will show up -> (GSTD -1 -> dont' activate, GSTD 0 -> at start, GSTD 8 -> 2 spheres of health)
			Pointer 1 -> unk
			Pointer 2 -> What action you have to do (GSTD 0 -> nothing, GSTD 1 -> super attack UP, GSTD 8 -> vanish)
			Pointer 3 -> unk
			Pointer 4 -> unk
			Pointer 5 -> unk
	01 00 0D 00 -> UNK (always follow the following intructions in the same order)
		08 68 03 00 -> UNK
		08 48 03 00 -> UNK
		08 6D 03 00 -> UNK
		08 4D 03 00 -> UNK
		08 62 03 00 -> UNK
		08 62 03 00 -> UNK
		08 62 03 00 -> UNK
		08 62 03 00 -> UNK
		08 62 03 00 -> UNK
		08 62 03 00 -> UNK
		08 62 03 00 -> UNK
	01 00 0E 00 08 63 05 00 -> UNK
	08 6C 05 00 -> UNK
	08 68 05 00 -> UNK
	08 48 05 00 -> How many health stars the cpu
		Pointer 0 -> Character ID
		Pointer 1 -> Health ammount (percentage)
		Pointer 2 -> UNK
		Pointer 3 -> UNK
	08 6D 05 00 -> UNK
	08 4D 05 00 -> UNK
	08 62 05 00 -> UNK
	01 00 17 00 08 77 03 00 -> UNK
	01 00 02 00 -> End of events
